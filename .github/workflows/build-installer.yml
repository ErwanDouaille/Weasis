name: Build native installers
on:
  workflow_dispatch:

jobs:
  build:
    env:
      JDK_MODULES: "java.base,java.compiler,java.datatransfer,java.desktop,java.logging,java.management,java.prefs,java.xml,jdk.localedata,jdk.charsets,jdk.crypto.ec,jdk.crypto.cryptoki,jdk.unsupported,jdk.jdwp.agent"
      NAME: "Weasis"
      IDENTIFIER: "org.weasis.viewer"
      JVM_ARGS: "-splash:$APPDIR/resources/images/about-round.png -Dgosh.port=17179"
      WEASIS_INPUT: "weasis-distributions/target/portable-dist/weasis-portable"
      WEASIS_OUTPUT: "weasis-distributions/target/native-dist"
      WEASIS_INPUT_BIN: "weasis-distributions/target/portable-dist/weasis-portable/weasis"
      WEASIS_OUTPUT_BIN: "weasis-distributions/target/native-dist/weasis"
      SUBSTANCE_PKG: "3.0.0"  # Package for Java 11 (remove in weasis 4)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
      #  - { os: ubuntu-latest, name: GNU, cc: gcc, cxx: g++, platform: x32, wsystem: linux, warc: x86 }
      #  - { os: ubuntu-latest, name: GNU, cc: gcc, cxx: g++, platform: x64, wsystem: linux, warc: x86-64 }
      #  - { os: macos-latest, name: Clang, cc: clang, cxx: clang++, platform: x64, wsystem: macosx, warc: x86-64 }
      #  - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x32, wsystem: windows, warc: x86 }
        - { os: windows-2016, name: VS2017, cc: cl, cxx: cl, platform: x64, wsystem: windows, warc: x86-64 }
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 16-ea
      uses: actions/setup-java@v1
      with:
        java-version: 16.0.0-ea.14
    
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Cache weasis-portable
      uses: actions/cache@v2
      with:
        path: ${{ env.WEASIS_INPUT }}
        key: ${{ runner.os }}-weasis-${{ hashFiles('**/*.xz') }}
        restore-keys: |
          ${{ runner.os }}-weasis-

    - name: Build with Maven
      run: |
        mvn clean install
        mvn clean install -Dportable=true -P compressXZ -f weasis-distributions
      
    - name: Retrieve version
      shell: bash
      run: echo ::set-env name=WEASIS_VERSION::$(awk -F'[<>]' '/<revision>/{print $3}' weasis-parent/pom.xml)$(awk -F'[<>]' '/<changelist>/{print $3}' weasis-parent/pom.xml)

    - name: Set compatible version
      shell: bash
      run: echo ::set-env name=WEASIS_CLEAN_VERSION::$(echo $WEASIS_VERSION | sed -e 's/"//g' -e 's/-.*//')

    - name: Unzip portable version
      shell: bash
      run: |
        unzip -o "weasis-distributions/target/portable-dist/weasis-portable.zip" -d "$WEASIS_INPUT"

    - name: Remove binaries not releated to the current architecture
      shell: bash
      run: |
        # Remove pack jar for launcher
        rm -f ${{ env.WEASIS_INPUT_BIN }}/*.jar.pack.gz
        # Remove the unrelated native packages
        find ${{ env.WEASIS_INPUT_BIN }}/bundle/weasis-opencv-core-* -type f ! -name *weasis-opencv-core-${{ matrix.wsystem }}-${{ matrix.warc }}-* -exec rm -f {} \;
        # Special case with 32-bit architecture, remove 64-bit lib
        if [ "${{ matrix.warc }}" = "x86" ] ; then
          rm -f ${{ env.WEASIS_INPUT_BIN }}/bundle/weasis-opencv-core-${{ matrix.wsystem }}-x86-64-*
        fi
        echo "$(ls ${{ env.WEASIS_INPUT_BIN }}/bundle/)"

    - name: Replace substance by a more recent version for Java 11
      shell: bash
      run: |
        curl -L -o "${{ env.WEASIS_INPUT }}/substance.jar" "https://raw.github.com/nroduit/mvn-repo/master/org/pushing-pixels/radiance-substance-all/${{ env.SUBSTANCE_PKG }}/radiance-substance-all-${{ env.SUBSTANCE_PKG }}.jar"
        echo "$(ls -la ${{ env.WEASIS_INPUT }})"
        
    - name: Build app binary with jpackage
      shell: bash
      env:
        RES: "weasis-distributions/script/resources/${{ matrix.wsystem }}"
      run: |
        jpackage --type app-image --input "${{ env.WEASIS_INPUT_BIN }}" --dest "${{ env.WEASIS_OUTPUT }}" --name "$NAME" \
        --main-jar weasis-launcher.jar --main-class org.weasis.launcher.AppLauncher --add-modules "${{ env.JDK_MODULES }}" \
        --resource-dir "${{ env.RES }}" --java-options "${{ env.JVM_ARGS }}" --app-version "${{ env.WEASIS_CLEAN_VERSION }}" --verbose
         
        # Build exe for debugging in the console and copy them into the debug folder
        if [ "${{ matrix.wsystem }}" == "windows" ] ; then
          jpackage --type app-image --input "${{ env.WEASIS_INPUT_BIN }}" --dest "${{ env.WEASIS_OUTPUT }}-debug" --name "$NAME" \
          --main-jar weasis-launcher.jar --main-class org.weasis.launcher.AppLauncher --add-modules "$JDK_MODULES" \
          --resource-dir "$RES" --java-options "$JVM_ARGS" --app-version "$WEASIS_CLEAN_VERSION" --win-console --verbose
          mkdir "${{ env.WEASIS_OUTPUT_BIN }}/debug"
          cp "${{ env.WEASIS_OUTPUT }}-debug/$NAME/$NAME.exe" "${{ env.WEASIS_OUTPUT_BIN }}/debug/$NAME.exe"
        fi
        echo "$(ls -la ${{ env.WEASIS_OUTPUT_BIN }})"

    - name: Adapt launching options
      shell: bash
      env:
        RES: "weasis-distributions/script/resources/${{ matrix.wsystem }}"
      run: |
        machine=${{ matrix.wsystem }}
        if [ "$machine" = "macosx" ] ; then
          OUT_APP="${{ env.WEASIS_OUTPUT }}/$NAME.app/Contents/app"
        elif [ "$machine" = "windows" ] ; then
          OUT_APP="${{ env.WEASIS_OUTPUT_BIN }}/app"         
        else
          OUT_APP="${{ env.WEASIS_OUTPUT_BIN }}/lib/app"
        fi

        match="\[JavaOptions\]"
        insertOptions='\
        #java-options=-Daudit.log=true\
        #java-options=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8789\
        java-options=--illegal-access=warn\
        java-options=--add-exports=java.base\/sun.net.www.protocol.http=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.file=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.https=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.file=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.ftp=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.jar=ALL-UNNAMED\
        java-options=--add-exports=jdk.unsupported\/sun.misc=ALL-UNNAMED\
        java-options=--add-opens=java.base\/java.net=ALL-UNNAMED\
        java-options=--add-opens=java.base\/java.lang=ALL-UNNAMED\
        java-options=--add-opens=java.base\/java.security=ALL-UNNAMED\
        java-options=--add-opens=java.base\/java.io=ALL-UNNAMED\
        java-options=--add-opens=java.desktop\/javax.imageio.stream=ALL-UNNAMED\
        java-options=--add-opens=java.desktop\/javax.imageio=ALL-UNNAMED\
        java-options=--add-opens=java.desktop\/com.sun.awt=ALL-UNNAMED'
        sed -i.bck "s/$match/$match$insertOptions/" "$OUT_APP/$NAME.cfg"
        sed -i.bck '/^java-options=--module-path/d' "$OUT_APP/$NAME.cfg"
        sed -i.bck '/mods\r\{0,1\}/d' "$OUT_APP/$NAME.cfg"
        rm -f "$OUT_APP/$NAME.cfg.bck"

        if [ "$machine" = "linux" ] ; then
          cp "$RES/Dicomizer.desktop" "${{ env.WEASIS_OUTPUT_BIN }}/lib/weasis-Dicomizer.desktop"
        elif [ "$machine" = "windows" ] ; then
          # Fix icon of second launcher
          cp "$RES/Dicomizer.ico" "${{ env.WEASIS_OUTPUT_BIN }}/Dicomizer.ico"
        elif [ "$machine" = "macosx" ] ; then
          cp -Rf "$RES/weasis-uri-handler.app" "${{ env.WEASIS_OUTPUT }}/$NAME.app/Contents/MacOS/"
          cp -Rf "$RES/Dicomizer.app" "${{ env.WEASIS_OUTPUT }}/$NAME.app/Contents/MacOS/"
        fi
        
        cat "$OUT_APP/$NAME.cfg"

    - name: Build package with jpackage
      shell: bash
      env:
        RES: "weasis-distributions/script/resources/${{ matrix.wsystem }}"
        FILE_ASSOC: "weasis-distributions/script/file-associations.properties"
        VENDOR: "Weasis Team"
        COPYRIGHT: "Â© 2009-2020 Weasis Team"
      run: |
        machine=${{ matrix.wsystem }}
        ARC_NAME=${{ matrix.warc }}
        if [ "$machine" = "windows" ] ; then
          [ "$ARC_NAME" = "x86" ] && UPGRADE_UID="3aedc24e-48a8-4623-ab39-0c3c01c7383b" || UPGRADE_UID="3aedc24e-48a8-4623-ab39-0c3c01c7383a"
          jpackage --type "msi" --app-image "${{ env.WEASIS_INPUT_BIN }}" --dest "${{ env.WEASIS_OUTPUT }}" --name "$NAME" --resource-dir "$RES/msi/$ARC_NAME" \
          --license-file "${{ env.WEASIS_INPUT }}/Licence.txt" --description "Weasis DICOM viewer" \
          --win-menu --win-menu-group "$NAME" --win-upgrade-uuid "$UPGRADE_UID" \
          --copyright "$COPYRIGHT" --app-version "$WEASIS_CLEAN_VERSION" \
          --vendor "$VENDOR" --file-associations "$FILE_ASSOC" --verbose
          mv "${{ env.WEASIS_OUTPUT_BIN }}/$NAME-$WEASIS_CLEAN_VERSION.msi" "${{ env.WEASIS_OUTPUT_BIN }}/$NAME-$WEASIS_CLEAN_VERSION-$ARC_NAME.msi"
        elif [ "$machine" = "linux" ] ; then
          declare -a installerTypes=("deb" "rpm")
          for installerType in ${installerTypes[@]}; do
            jpackage --type "$installerType" --app-image "${{ env.WEASIS_INPUT_BIN }}" --dest "${{ env.WEASIS_OUTPUT }}" --name "$NAME" --resource-dir "$RES/$installerType" \
            --license-file "${{ env.WEASIS_INPUT }}/Licence.txt" --description "Weasis DICOM viewer" --vendor "$VENDOR" \
            --copyright "$COPYRIGHT" --app-version "$WEASIS_CLEAN_VERSION" --file-associations "$FILE_ASSOC" \
            --linux-app-release "$REVISON_INC" --linux-package-name "weasis" --linux-deb-maintainer "Nicolas Roduit" --linux-rpm-license-type "EPL-2.0" \
            --linux-menu-group "Viewer;MedicalSoftware;Graphics;" --linux-app-category "science" --linux-shortcut --verbose
          done
        elif [ "$machine" = "macosx" ] ; then
          jpackage --type "pkg" --app-image "${{ env.WEASIS_INPUT_BIN }}.app" --dest "${{ env.WEASIS_OUTPUT }}" --name "$NAME" --resource-dir "$RES" \
          --license-file "${{ env.WEASIS_INPUT }}/Licence.txt" --copyright "$COPYRIGHT" --app-version "$WEASIS_CLEAN_VERSION" --mac-package-identifier "$IDENTIFIER" \
          --mac-signing-key-user-name "$CERTIFICATE" --verbose "$MAC_SIGN"
        fi
        echo "$(ls -la ${{ env.WEASIS_OUTPUT_BIN }})"
